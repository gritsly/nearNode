---
# Update server & restart if needed

- hosts: servers
  become: yes
  tasks:
    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all packages on servers
      apt: upgrade=dist force_apt_get=yes

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

# Install near

- hosts: servers
  tasks:
    - name: Fetch nodejs
      uri: 
        url: https://deb.nodesource.com/setup_18.x
        return_content: yes
      register: nodejs_installer

    - name: Install nodejs repo
      shell: 
        cmd: bash -s --
        stdin: "{{ nodejs_installer.content }}"
      become: yes
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
    
    - name: Install nodejs & npm
      apt: 
        name : "{{ item }}"
        state: present
      with_items:
        - build-essential
        - nodejs
      become: yes

    - name: Update npm
      community.general.npm:
        name: npm
        global: yes
        state: latest
      become: yes
    
    - name: Check node version
      command: node -v
      register: version_output
    - debug:
        var: version_output.stdout_lines

    - name: install nearcli
      community.general.npm:
        name: near-cli
        global: yes
        path: /usr/local/bin/
      become: yes
    
    - name: add nearcli to bashrc
      lineinfile: dest=~/.bashrc line='export NEAR_ENV=shardnet' insertafter='EOF' state=present

    - name: Get developer tools
      apt: 
        name : "{{ item }}"
        state: present
      with_items:
        - git 
        - binutils-dev
        - libcurl4-openssl-dev
        - zlib1g-dev
        - libdw-dev
        - libiberty-dev
        - cmake
        - gcc
        - g++
        - python3
        - docker.io
        - protobuf-compiler
        - libssl-dev
        - pkg-config 
        - clang
        - llvm
        - cargo
        - python3-pip
        - clang
        - make
        - jq
        - ccze
      become: yes
    
    - name: Upgrade pip
      pip:
        name: pip
        state: latest

    - name: Fetch rustup
      uri: 
        url: https://sh.rustup.rs
        return_content: yes
      register: rustup_installer

    - name: Install rustup
      shell: 
        cmd: sh -s -- -y
        stdin: "{{ rustup_installer.content }}"

    - name: Source environment
      shell: source $HOME/.cargo/env
      args:
        executable: /bin/bash

    - name: Clone a repo with separate git directory
      git:
        repo: https://github.com/near/nearcore
        dest: ~/nearcore
        version: shardnet
        force: yes

    - name: compile nearcore binary
      command: ~/.cargo/bin/cargo build -p neard --release --features shardnet
      args:
        chdir: ~/nearcore
        creates: ~/nearcore/target/release/neard 

    - name: initialize working directory
      command: ./target/release/neard --home ~/.near init --chain-id shardnet --download-genesis
      args: 
        creates: ~/.near/node_key.json
        chdir: ~/nearcore/

    - name: update config.json
      get_url:
        url: https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/shardnet/config.json
        dest: ~/.near/config.json
        force: yes

    - name: Create neard systemd service file
      template:
        src: templates/neard.service.j2
        dest: /etc/systemd/system/neard.service
      become: yes

    - name: Start neard service
      systemd:
        name: neard
        state: started
        enabled: yes
      become: yes

    - name: Create scripts directory
      file:
        path: ~/scripts
        state: directory

    - name: Create logs directory
      file:
        path: ~/logs
        state: directory

    - name: Create checkscript
      template:
        src: templates/checkscript.j2
        dest: ~/scripts/checkscript.sh

    - name: Create pingscript
      template:
        src: templates/ping.j2
        dest: ~/scripts/ping.sh

    - name: Creates a ping crontab
      cron:
        name: ping staking pool
        minute: "0"
        hour: "*/2"
        user: "{{ ansible_user }}"
        job: sh /home/{{ ansible_user }}/scripts/ping.sh